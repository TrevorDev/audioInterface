// Generated by CoffeeScript 1.6.2
var Pcm, Playback, libasound, stream,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

stream = require('stream');

Pcm = require('./pcm');

libasound = require('./libasound');

Playback = (function(_super) {
  __extends(Playback, _super);

  function Playback(device, channels, rate, format, access, async) {
    var _this = this;

    if (device == null) {
      device = 'default';
    }
    if (channels == null) {
      channels = 2;
    }
    if (rate == null) {
      rate = 44100;
    }
    if (format == null) {
      format = libasound.PCM_FORMAT_S16_LE;
    }
    if (access == null) {
      access = libasound.PCM_ACCESS_RW_INTERLEAVED;
    }
    this.async = async != null ? async : false;
    stream.Writable.call(this);
    this.pcm = new Pcm(device, libasound.PCM_STREAM_PLAYBACK);
    this.pcm.open().access(access).format(format).channels(channels).rate(rate).prepare();
    this.on('end', function() {
      return _this.pcm.drop().drain().close();
    });
    this.bytesPerFrame = this.pcm.bytesPerFrame();
  }

  Playback.prototype.async_write = function(chunk, encoding, callback) {
    var _this = this;

    return this.pcm.writei(chunk, chunk.length / this.bytesPerFrame, function(err, wroteFrames) {
      if (wroteFrames < 0) {
        return callback(wroteFrames);
      }
      if (wroteFrames === 0) {
        return callback("No frames written");
      }
      return callback();
    });
  };

  Playback.prototype.sync_write = function(chunk, encoding, callback) {
    var wroteFrames;

    wroteFrames = this.pcm.writei(chunk, chunk.length / this.bytesPerFrame);
    if (wroteFrames < 0) {
      return callback(wroteFrames);
    }
    if (wroteFrames === 0) {
      return callback("No frames written");
    }
    return callback();
  };

  Playback.prototype._write = function(chunk, encoding, callback) {
    if (this.async) {
      return this.async_write(chunk, encoding, callback);
    } else {
      return this.sync_write(chunk, encoding, callback);
    }
  };

  return Playback;

})(stream.Writable);

module.exports = Playback;
