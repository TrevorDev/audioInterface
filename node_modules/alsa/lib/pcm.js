// Generated by CoffeeScript 1.6.2
var Pcm, libasound, ref,
  __slice = [].slice;

ref = require('ref');

libasound = require('./libasound');

Pcm = (function() {
  function Pcm(device, stream, mode) {
    this.device = device;
    this.stream = stream;
    this.mode = mode != null ? mode : 0;
  }

  Pcm.prototype.catchErr = function(err, msg) {
    if (err < 0) {
      throw "ERROR: " + msg + " " + (libasound.snd_strerror(err));
    }
    return this;
  };

  Pcm.prototype.start = function() {
    return this.catchErr(libasound.snd_pcm_start(this.pcm), "Can't start pcm");
  };

  Pcm.prototype.prepare = function() {
    this.updateHwParams();
    return this.catchErr(libasound.snd_pcm_prepare(this.pcm), "Can't prepare pcm");
  };

  Pcm.prototype.drain = function() {
    return this.catchErr(libasound.snd_pcm_drain(this.pcm), "Can't drain pcm");
  };

  Pcm.prototype.drop = function() {
    return this.catchErr(libasound.snd_pcm_drop(this.pcm), "Can't drop pcm");
  };

  Pcm.prototype.close = function() {
    var pcm, _ref;

    _ref = [this.pcm, null], pcm = _ref[0], this.pcm = _ref[1];
    return this.catchErr(libasound.snd_pcm_close(pcm), "Can't close pcm");
  };

  Pcm.prototype.name = function() {
    return libasound.snd_pcm_name(this.pcm);
  };

  Pcm.prototype.state = function() {
    return libasound.snd_pcm_state(this.pcm);
  };

  Pcm.prototype.stateName = function() {
    return libasound.snd_pcm_state_name(this.state());
  };

  Pcm.prototype.open = function() {
    var pcmPtr;

    pcmPtr = ref.alloc(libasound.pcmPtrPtr);
    this.catchErr(libasound.snd_pcm_open(pcmPtr, this.device, this.stream, this.mode), "Can't open \"" + this.device + "\" PCM device");
    this.pcm = pcmPtr.deref();
    return this;
  };

  Pcm.prototype.hwParams = function() {
    var _ref;

    return (_ref = this._hwParams) != null ? _ref : this._hwParams = this._loadDefaultHwParams();
  };

  Pcm.prototype._loadDefaultHwParams = function() {
    var hwParams;

    hwParams = ref.alloc(libasound.pcmHwParamsPtr);
    this.catchErr(libasound.snd_pcm_hw_params_any(this.pcm, hwParams));
    return hwParams;
  };

  Pcm.prototype.updateHwParams = function() {
    return this.catchErr(libasound.snd_pcm_hw_params(this.pcm, this.hwParams()), "Can't set hw params");
  };

  Pcm.prototype.setHwParam = function() {
    var param, values;

    param = arguments[0], values = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return this.catchErr(libasound["snd_pcm_hw_params_set_" + param].apply(libasound, [this.pcm, this.hwParams()].concat(__slice.call(values))), "Can't set " + param);
  };

  Pcm.prototype.getHwParam = function() {
    var args, param, paramPtr;

    param = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    paramPtr = ref.alloc('int');
    this.catchErr(libasound["snd_pcm_hw_params_get_" + param].apply(libasound, [this.hwParams(), paramPtr].concat(__slice.call(args))), "Can't get " + param);
    return paramPtr.deref();
  };

  Pcm.prototype.access = function(access) {
    if (access != null) {
      return this.setHwParam('access', access);
    } else {
      return this.getHwParam('access');
    }
  };

  Pcm.prototype.format = function(format) {
    if (format != null) {
      return this.setHwParam('format', format);
    } else {
      return this.getHwParam('format');
    }
  };

  Pcm.prototype.channels = function(channels) {
    if (channels != null) {
      return this.setHwParam('channels', channels);
    } else {
      return this.getHwParam('channels');
    }
  };

  Pcm.prototype.rate = function(rate, dir) {
    if (dir == null) {
      dir = 0;
    }
    if (rate != null) {
      return this.setHwParam('rate', rate, dir);
    } else {
      return this.getHwParam('rate', ref.alloc('int'));
    }
  };

  Pcm.prototype.framesPerPeriod = function() {
    var dirPtr, framesPtr;

    framesPtr = ref.alloc('ulong');
    dirPtr = ref.alloc('int');
    this.catchErr(libasound.snd_pcm_hw_params_get_period_size(this.hwParams(), framesPtr, dirPtr), "Can't get frames per period");
    return framesPtr.deref();
  };

  Pcm.prototype.bytesPerFrame = function() {
    return libasound.snd_pcm_format_size(this.format(), this.channels());
  };

  Pcm.prototype.readi = function(buffer, framesPerBuffer, callback) {
    if (callback != null) {
      return libasound.snd_pcm_readi.async(this.pcm, buffer, framesPerBuffer, callback);
    } else {
      return libasound.snd_pcm_readi(this.pcm, buffer, framesPerBuffer);
    }
  };

  Pcm.prototype.writei = function(buffer, framesPerBuffer, callback) {
    if (callback != null) {
      return libasound.snd_pcm_writei.async(this.pcm, buffer, framesPerBuffer, callback);
    } else {
      return libasound.snd_pcm_writei(this.pcm, buffer, framesPerBuffer);
    }
  };

  return Pcm;

})();

module.exports = Pcm;
