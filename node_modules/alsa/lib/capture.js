// Generated by CoffeeScript 1.6.2
var Capture, Pcm, libasound, stream,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

stream = require('stream');

Pcm = require('./pcm');

libasound = require('./libasound');

Capture = (function(_super) {
  __extends(Capture, _super);

  function Capture(device, channels, rate, format, access, async) {
    var _this = this;

    if (device == null) {
      device = 'default';
    }
    if (channels == null) {
      channels = 2;
    }
    if (rate == null) {
      rate = 44100;
    }
    if (format == null) {
      format = libasound.PCM_FORMAT_S16_LE;
    }
    if (access == null) {
      access = libasound.PCM_ACCESS_RW_INTERLEAVED;
    }
    this.async = async != null ? async : false;
    stream.Readable.call(this);
    this.pcm = new Pcm(device, libasound.PCM_STREAM_CAPTURE);
    this.pcm.open().access(access).format(format).channels(channels).rate(rate).prepare();
    this.on('end', function() {
      return _this.pcm.drop().drain().close();
    });
    this.periodsPerBuffer = this.async ? 32 : 4;
    this.framesPerPeriod = this.pcm.framesPerPeriod();
    this.bytesPerFrame = this.pcm.bytesPerFrame();
    this.framesPerBuffer = this.framesPerPeriod * this.periodsPerBuffer;
    this.bytesPerBuffer = this.framesPerBuffer * this.bytesPerFrame;
    this.buffer = new Buffer(this.bytesPerBuffer);
  }

  Capture.prototype.async_read = function(size) {
    var _this = this;

    return this.pcm.readi(this.buffer, this.framesPerBuffer, function(err, readFrames) {
      if (readFrames < 0) {
        return _this.push('');
      }
      if (readFrames === 0) {
        return _this.push(null);
      }
      return _this.push(_this.buffer.slice(0, readFrames * _this.bytesPerFrame));
    });
  };

  Capture.prototype.sync_read = function(size) {
    var readFrames;

    readFrames = this.pcm.readi(this.buffer, this.framesPerBuffer);
    if (readFrames < 0) {
      return this.push('');
    }
    if (readFrames === 0) {
      return this.push(null);
    }
    return this.push(this.buffer.slice(0, readFrames * this.bytesPerFrame));
  };

  Capture.prototype._read = function(size) {
    if (this.async) {
      return this.async_read(size);
    } else {
      return this.sync_read(size);
    }
  };

  return Capture;

})(stream.Readable);

module.exports = Capture;
